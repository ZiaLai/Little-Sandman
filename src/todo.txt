===================================
Planning :
https://docs.google.com/spreadsheets/d/1wY1d4xigQfcB7zREt-sLo0T2_EJqLwas95yTEHs8QYk/edit?gid=0#gid=0
===================================

[x] Revoir la camera car si la camera est bugguée, alors les déplacements dont buggés
    [x] Faire en sorte qu'on puisse obtenir l'orientation de la camera
    En fait il faut juste utiliser l'alpha et de la trigo
[x] Refaire déplacements en utilisant le tuto
    [x] Ajuster les angles de trigo en ajoutant des PI pour qu'on avance dans le bon sens
    [x] Clamper le mouvement diagonal
    [x] Rotation du personnage

===================================
Méthode pour déplacer le personnage
===================================
1. On récupère les valeurs des inputs sur les deux axes
2. Trouver un vecteur forward, qui donne la direction vers laquelle la cam pointe
3. Trouver un vecteur right, qui donne la direction à droite de la caméra
4. "corriger" ces deux vecteurs en les scalant par les inputs
5. Additionner les deux vecteurs
6. Scaler par la vitesse du perso (et le deltaTime)
7. Annuler la valeur en y (pour être sûr que le perso s'envole pas)
===================================

[x] Corriger le bug de plannage
    Pour déclencher le bug : Sauter, appuyer sur shift, relâcher shift avant la fin de l'hovering
    Le bug est causé par les || keyMap[même lettre en majuscule]
    En fait, on démarre l'action en minuscule, mais on l'annule avec une majuscule (donc elle continue indéfiniment)

    Après avoir enlevé ces "ou",
    On a toujours le même problème, car le fait de shifter fait qu'on relâche pas la "bonne" touche

    La pseudo solution marche pas... pour l'instant
    Maintenant ça marche

[x] Corriger le problème de caméra qui passe sous le sol

[x] Importer le sandman
    [x] Ajuster la cam
    [x] Modifier la capsule de collision
    Pas besoin de faire tout ça en fait

[x] Tourner la camera sans avoir besoin de cliquer
[x] Empecher la camera de passer au travers des murs (collisions)
    Idée : caster des rays vers l'arrière de la camera, pour repositionner la camera en la rapprochant du Player

[x] Coder le déplacement sur une pente (tuto)

CAMERA
        [x] Ne pas bouger la caméra quand le joueur saute
        [x] Enlever l'interpolation de la camera sur les côtés
        [x] Faire en sorte que le joueur ne sorte pas du champ de vision de la camera quand on tombe d'un espace surélevé

FPS
    [x] Limiter les fps ? Quand on est uniquement sur le PC portable, ça passe en 120 fps.
        C'est un problème avec les delta time
        [x] Vitesse de déplacement
        [x] Hauteur du saut
        [x] Durée du hovering

[x] Sauter plus haut si on laisse espace appuyé (tuto Griffpatch ?)
    Méthode
    #######
    Si speedY < (1/3 de la jumpForce * dt) ou espace pressé:
        Gravité normale
    Sinon:
        Doubler la gravité
==================================================================
[X] Empêcher de sauter à nouveau si on laisse espace appuyé sans relâcher
   Méthode
       #######
       Variable falling compte le nombre de frames passées dans les airs
       Elle est remise à 0 dès qu'on touche le sol
       jumpKey permet de vérifier si on relâche la touche de saut entre deux sauts
       Si la touche de saut est pressée:
           Si jumpKey = 0 ET falling < 3:
               On booste le speedY
               On met falling à 6 (ou n'importe quelle valeur > 3)
               On met jumpKey à 1w
       Sinon:
           On met jumpKey à 0
==================================================================
[x] Ajouter du momentum (tuto Griffpatch ?)
    Pas besoin du tuto. Il suffit de rajouter de l'interpolation sur v et h

########################################################################################################################

########################################################################################################################

Petit problème : dans un niveau, on change de scènes entre la cuisine et les brèches. Il faut qu'on garde en mémoire
l'état de la scène précédente, pour ne pas faire respawn tous les éléments.

[] Faire une classe Level
    [] constructeur avec ressource d'environnement
    [] load() charge les ressources : environnement, musiques, sprites des objets
    [] initialize(), initialise les objets du niveau
    [] setActive(), rend le niveau actif
    [] destruct(), détruit les ressources
    [] update(), met à jour tous les objets du niveau


[] Pour créer les niveaux, on fera des sous classes implémentant Level (par ex Level1_1_1, Level1_1_2, Level1_1_3)

[] Démarrer le niveau ville, en créant la game.



[] Pour utiliser les fonctions update, il faudra mettre les update en beforeRender
https://forum.babylonjs.com/t/which-best-method-for-mesh-rendering-updated-every-frame/2834/2
En fait, je sais pas...





========================================================================================================================

[x] mettre le joueur à la start position quand on charge le niveau
    On abandonne ?
    On peut juste hard code la position de départ sinon.
    Il faudrait quand même qu'on puisse récupérer la position, parce qu'on aura besoin de placer
    d'autres éléments à part le joueur.
    - soit en utilisant des meshs
    - soit en essayant de récupérer la position d'un TransformNode

[x] Modifier la liste d'AbstractLevel en dico pour y accéder par nom

[x] Créer le niveau "chambre boulangère"

[x] Y accéder avec le bouton "change"

[x] Y accéder avec une collision avec un trigger


========================================================================================================================

[x] Supprimer anciens modèles

[x] Séparer la camera du player dans une autre classe

[x] Faire du raycasting sur des meshs invisibles

[] Équilibrer la camera à la Mario


========================================================================================================================

[] Voir avec Zia pour ajuster la startPosition (là on spawn sous la ville)
    En fait le problème vient probablement du fait que le joueur peut charger avant la ville
    et donc passer sous le sol.
    Il faut faire de l'asynchrone

[] Faire en sorte qu'il puisse y avoir plusieurs positions de départ.
    Passer la position en argument de setActiveLevel ?
    On pourrait avoir une position par default, mais pouvoir changer si nécessaire
    (Quand on sort de la baker's bedroom on doit spawner derrière la fenêtre)



========================================================================================================================
[x] Réactiver le raycast pour les objets immatériels

[x] Réduire vitesse de déplacement
[x] Vérifier/enlever interpolation de la cam pour éviter les bugs quand on se déplace
    En fait le problème vient du fait que le sol n'est pas parfaitement plat
    Bug de camera quand on marche vers l'arrière en se regardant

[x] Corriger bug camera qui passe dans les murs (Laisser plus d'espace entre le mur et la cam)
    Ajouter d'autres raycasts ?

[] Bug : on peut spawner dans le sol.
    Il faut s'assurer que la map soit chargée avant qu'on place le player.


[] Gérer la lumière (trop de lumière dans la cuisine)
[] Ajouter un plafond artificiel (il faudra donc coder la ceiling detection)




AVEC ZIA
[] Mettre la startPosition dans la ville
[] Résoudre les bugs de collision
    En fait, c'est la géométrie de psychopathe qui cause ces problèmes.
    Dans la première version de la ville, les collisions sont complètement ok.


SIDE QUESTS
[] Empêcher la caméra de passer sous le sol

POLISH

[] Ajouter la ceiling detection
    Faire des raycasts vers le haut comme pour la détection du sol ?

[x] Faire en sorte qu'on puisse regarder vers le ciel
    Il faut que la camera se rapproche du joueur quand la camera descend vers le sol
    Dans genshin, le perso devient transparent aussi

    Il faut pas Lerper vers une position fixe. Il faudrait une fonction qui au beta associe le radius.

    On est pas loin, il faut juste recalculer une fonction qui zoome un peu plus (On avait pris 5 comme radius)
    On peut essayer avec 4.




BUGS
[x] Bug Quand on clique, puis appuie sur échap
    Rattrappage de l'erreur

[] Bugs de camera. Vérifier l'interpolation ?


SON
Babylon js ne prend pas en charge les fichiers midi.
Il faudra exporter les pistes individuellement en .wav par exemple
Dans la doc : Playing several sounds simultaneously and synchronized
On démarre tous les sons en même temps, mais on met le volume sonore à 0 pour les pistes qu'on n'utilise pas encore.






INUTILE
[] Faire un mini déplacement vers le haut quand on commence l'hovering
    Bof en fait ?

====================================================================
====================================================================
ON OUBLIE
[] Utiliser un character controller au lieu de le coder soi-même ?
    Mais en fait, il faut utiliser un moteur physique pour pouvoir faire ça.
    Du coup on oublie

[] Reprogrammer la détection du sol/pentes comme Griffpatch car là on passe parfois au travers
    En fait, bof. Mieux vaut éviter les boucles infinies

#hammerjs

En vrai, est-ce que y a vraiment besoin de faire ça MAINTENANT ?
Oui, parce que sinon, ça va devenir horrible avec l'enum
[] Faire un changement entre deux scènes
    Par exemple entre la ville et le monde du tuto
    Pour ça il faudra d'abord restructurer le code. Il ne faut pas utiliser une enum car c'est pas terrible.
    Il va falloir faire des classes d'état.
    [] GameState (classe mère)
        [] GameplayState
            Prend en paramètre une ressource graphique
        [] MenuState
            Il faut définir les menus dans le corps de la classe (et si on utilisait des classes anonymes ?
                                                                  ça permettrait d'écrire tous les états dans un seul fichier)

       QUESTION : Est-ce qu'il faut faire une structure qui permet de savoir quels sont les états voisins.
                    Afin de les charger à l'avance ? On peut faire par exemple un graphe ou un arbre.
                    ça a l'air intéressant, mais on verra ça plus tard...

    Sinon on peut juste faire une classe SceneManager.
    Il aurait une scene active. Et pourrait charger les autres scènes. En fait ça revient au même.
    En fait on a besoin des deux. on pourrait plutôt l'appeler GameStateManager.
    Et voilà.

    De quoi a besoin une scène ?
    1. d'être initialisée => Charger ressource graphique, et faire spawn des mobs par exemple
    2. d'être update => boucle de jeu

    On peut peut-être dissocier le chargement des ressources avec un RessourceManager ?


RECAP
    En fait une scene a besoin de :
        - start : actions exécutées quand on démarre la scène
        - update : la boucle de jeu de la scene